#!/bin/bash

# –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –ø–∞–ø–∫–∏ Motia Step –≤ –æ–¥–∏–Ω markdown —Ñ–∞–π–ª –¥–ª—è Claude CLI
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./aggregate-step-to-md.sh <step-folder-path> <output-name>

STEP_FOLDER=$1
OUTPUT_NAME=${2:-"step-complete-description"}

if [ -z "$STEP_FOLDER" ] || [ ! -d "$STEP_FOLDER" ]; then
    echo "Usage: $0 <step-folder-path> [output-name]"
    echo ""
    echo "–ü—Ä–∏–∫–ª–∞–¥:"
    echo "  $0 ./user-processor user-processor-full"
    echo "  $0 ./steps/api/create-order create-order-complete"
    echo ""
    echo "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏:"
    echo "  handler.ts/py         # –õ–æ–≥—ñ–∫–∞ –∫—Ä–æ–∫—É"
    echo "  config.json           # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Motia"
    echo "  schema.json           # –°—Ö–µ–º–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"
    echo "  README.md             # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è"
    echo "  diagrams/             # –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º–∏"
    echo "  tests/                # –¢–µ—Å—Ç–∏"
    echo "  docs/                 # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è"
    exit 1
fi

# –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∫—Ä–æ–∫—É –∑ –ø–∞–ø–∫–∏
STEP_NAME=$(basename "$STEP_FOLDER")
OUTPUT_FILE="step-descriptions/${OUTPUT_NAME}.md"

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
mkdir -p step-descriptions

# –ü–æ—á–∞—Ç–æ–∫ markdown —Ñ–∞–π–ª—É
cat > "$OUTPUT_FILE" << EOF
# $STEP_NAME - –ü–æ–≤–Ω–∏–π –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–∏–π –æ–ø–∏—Å –∫—Ä–æ–∫—É Motia

> –¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –ø–∞–ø–∫–∏ –∫—Ä–æ–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤ Claude CLI

## üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—Ä–æ–∫—É
\`\`\`
EOF

# –î–æ–¥–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–∫–∏
echo "$STEP_NAME/" >> "$OUTPUT_FILE"
find "$STEP_FOLDER" -type f -o -type d | sort | sed "s|$STEP_FOLDER|‚îú‚îÄ‚îÄ|g" | sed 's/‚îú‚îÄ‚îÄ/‚îú‚îÄ‚îÄ /' >> "$OUTPUT_FILE"

cat >> "$OUTPUT_FILE" << 'EOF'
```

## üìã –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫—Ä–æ–∫—É

EOF

# –î–æ–¥–∞—î–º–æ config.json —è–∫—â–æ —ñ—Å–Ω—É—î
if [ -f "$STEP_FOLDER/config.json" ]; then
    echo "### config.json" >> "$OUTPUT_FILE"
    echo '```json' >> "$OUTPUT_FILE"
    cat "$STEP_FOLDER/config.json" >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
fi

# –î–æ–¥–∞—î–º–æ schema.json —è–∫—â–æ —ñ—Å–Ω—É—î
if [ -f "$STEP_FOLDER/schema.json" ]; then
    echo "### schema.json" >> "$OUTPUT_FILE"
    echo '```json' >> "$OUTPUT_FILE"
    cat "$STEP_FOLDER/schema.json" >> "$OUTPUT_FILE"
    echo '```' >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
fi

# –î–æ–¥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –ª–æ–≥—ñ–∫—É –∫—Ä–æ–∫—É
echo "## üîß –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫—Ä–æ–∫—É" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# handler.ts –∞–±–æ handler.py
for handler_file in "$STEP_FOLDER/handler.ts" "$STEP_FOLDER/handler.py" "$STEP_FOLDER/handler.rb"; do
    if [ -f "$handler_file" ]; then
        handler_ext="${handler_file##*.}"
        echo "### $(basename $handler_file)" >> "$OUTPUT_FILE"
        echo "\`\`\`$handler_ext" >> "$OUTPUT_FILE"
        cat "$handler_file" >> "$OUTPUT_FILE"
        echo '```' >> "$OUTPUT_FILE"
        echo "" >> "$OUTPUT_FILE"
        break
    fi
done

# –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º–∏
echo "## üé® –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º–∏" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

if [ -d "$STEP_FOLDER/diagrams" ]; then
    for diagram in "$STEP_FOLDER/diagrams"/*.drakon; do
        if [ -f "$diagram" ]; then
            diagram_name=$(basename "$diagram" .drakon)
            echo "### $diagram_name.drakon" >> "$OUTPUT_FILE"
            echo '```' >> "$OUTPUT_FILE"
            cat "$diagram" >> "$OUTPUT_FILE"
            echo '```' >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
        fi
    done
else
    echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ diagrams/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
fi

# README.md
if [ -f "$STEP_FOLDER/README.md" ]; then
    echo "## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –∫—Ä–æ–∫—É" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
    cat "$STEP_FOLDER/README.md" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
fi

# –¢–µ—Å—Ç–∏
echo "## üß™ –¢–µ—Å—Ç–∏" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

if [ -d "$STEP_FOLDER/tests" ]; then
    for test_file in "$STEP_FOLDER/tests"/**/*test*; do
        if [ -f "$test_file" ]; then
            test_ext="${test_file##*.}"
            test_name=$(basename "$test_file")
            echo "### $test_name" >> "$OUTPUT_FILE"
            echo "\`\`\`$test_ext" >> "$OUTPUT_FILE"
            cat "$test_file" >> "$OUTPUT_FILE"
            echo '```' >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
        fi
    done
else
    echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ tests/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
fi

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –∑ –ø–∞–ø–∫–∏ docs/
if [ -d "$STEP_FOLDER/docs" ]; then
    echo "## üìñ –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"

    for doc_file in "$STEP_FOLDER/docs"/*.md; do
        if [ -f "$doc_file" ]; then
            doc_name=$(basename "$doc_file" .md)
            echo "### $doc_name.md" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
            cat "$doc_file" >> "$OUTPUT_FILE"
            echo "" >> "$OUTPUT_FILE"
        fi
    done
fi

# –ó–∞–∫–ª—é—á–Ω–∞ —Å–µ–∫—Ü—ñ—è –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ –¥–ª—è Claude
cat >> "$OUTPUT_FILE" << 'EOF'

## üéØ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è Claude CLI

### –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏:
1. **–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏** –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—Ä–æ–∫—É –≤–∏—â–µ
2. **–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏** –∫–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ best practices Motia
3. **–î–æ–ø–æ–≤–Ω–∏—Ç–∏** –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
4. **–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏** –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º –ª–æ–≥—ñ—Ü—ñ –∫–æ–¥—É
5. **–°—Ç–≤–æ—Ä–∏—Ç–∏** –ø–æ–≤–Ω—É —Ä–æ–±–æ—á—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é –∫—Ä–æ–∫—É

### –í–∏–º–æ–≥–∏ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:
- –í—Å—ñ —Ñ–∞–π–ª–∏ –º–∞—é—Ç—å –±—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º–∏
- –ö–æ–¥ –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ Motia —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
- –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º–∏ –º–∞—é—Ç—å —Ç–æ—á–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –ª–æ–≥—ñ–∫—É
- –¢–µ—Å—Ç–∏ –º–∞—é—Ç—å –ø–æ–∫—Ä–∏–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –º–∞—î –±—É—Ç–∏ –ø–æ–≤–Ω–æ—é —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ—é

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:
–°—Ç–≤–æ—Ä–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑–≥—ñ–¥–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫—Ä–æ–∫—É –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º –∫–æ–¥–æ–º.
EOF

echo "‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–∏–π –æ–ø–∏—Å: $OUTPUT_FILE"
echo ""
echo "üöÄ –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É —á–µ—Ä–µ–∑ Claude CLI –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ:"
echo "claude --append-system-prompt "\$(cat CLAUDE.md)" --append-system-prompt "\$(cat patterns/PATTERN-pattern.md)" -p "\$(cat $OUTPUT_FILE)""
