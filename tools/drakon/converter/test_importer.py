#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç DRAKON —ñ–º–ø–æ—Ä—Ç–µ—Ä–∞

–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —ñ–º–ø–æ—Ä—Ç–µ—Ä–∞ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—î—é.

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python3 test_importer.py
"""

import sys
import json
from pathlib import Path

# –Ü–º–ø–æ—Ä—Ç —ñ–º–ø–æ—Ä—Ç–µ—Ä–∞
from drakon_json_importer import DrakonJSONImporter


def create_test_diagrams():
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤—ñ –¥—ñ–∞–≥—Ä–∞–º–∏ (–≤–∞–ª—ñ–¥–Ω—É —Ç–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω—É)"""
    test_dir = Path("./test_diagrams")
    test_dir.mkdir(exist_ok=True)

    # 1. –í–∞–ª—ñ–¥–Ω–∞ –¥—ñ–∞–≥—Ä–∞–º–∞
    valid_diagram = {
        "name": "Valid Test Diagram",
        "access": "write",
        "items": {
            "1": {"type": "branch", "branchId": 0, "one": "2"},
            "2": {"type": "action", "content": "Initialize", "one": "3"},
            "3": {"type": "question", "content": "Check status?", "one": "4", "two": "5"},
            "4": {"type": "action", "content": "Process success", "one": "6"},
            "5": {"type": "action", "content": "Handle error", "one": "6"},
            "6": {"type": "end"}
        }
    }

    valid_path = test_dir / "valid_diagram.json"
    with open(valid_path, 'w', encoding='utf-8') as f:
        json.dump(valid_diagram, f, indent=2, ensure_ascii=False)

    # 2. –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ (–≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    invalid_diagram = {
        # –í—ñ–¥—Å—É—Ç–Ω—î 'name'
        # –í—ñ–¥—Å—É—Ç–Ω—î 'access'
        "items": [  # –ú–∞—î –±—É—Ç–∏ dict, –∞ –Ω–µ list!
            {"type": "action", "text": "Do something"},
            # –í—ñ–¥—Å—É—Ç–Ω—ñ–π 'end'
            # –í—ñ–¥—Å—É—Ç–Ω—ñ–π 'branch'
        ]
    }

    invalid_path = test_dir / "invalid_diagram.json"
    with open(invalid_path, 'w', encoding='utf-8') as f:
        json.dump(invalid_diagram, f, indent=2, ensure_ascii=False)

    # 3. –î—ñ–∞–≥—Ä–∞–º–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏, —â–æ –º–æ–∂–Ω–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏
    fixable_diagram = {
        "name": "Fixable Diagram",
        # –í—ñ–¥—Å—É—Ç–Ω—î 'access' (–±—É–¥–µ –¥–æ–¥–∞–Ω–æ)
        "items": {
            "1": {"type": "action", "content": "Start"},
            "2": {"type": "action", "content": "Process"}
            # –í—ñ–¥—Å—É—Ç–Ω—ñ 'branch' —Ç–∞ 'end' (–±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ)
        }
    }

    fixable_path = test_dir / "fixable_diagram.json"
    with open(fixable_path, 'w', encoding='utf-8') as f:
        json.dump(fixable_diagram, f, indent=2, ensure_ascii=False)

    return test_dir, [valid_path, invalid_path, fixable_path]


def test_single_import():
    """–¢–µ—Å—Ç 1: –Ü–º–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É"""
    print("="*60)
    print("–¢–ï–°–¢ 1: –Ü–º–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É")
    print("="*60)

    test_dir, [valid_path, _, _] = create_test_diagrams()

    importer = DrakonJSONImporter(auto_fix=True)
    diagram, was_corrected = importer.import_diagram(valid_path, save_logs=True)

    assert diagram is not None, "–í–∞–ª—ñ–¥–Ω–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏—Å—å"
    assert not was_corrected, "–í–∞–ª—ñ–¥–Ω–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–ø—Ä–∞–≤–ª—è—Ç–∏—Å—å"

    print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù–û\n")


def test_auto_correction():
    """–¢–µ—Å—Ç 2: –ê–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—è"""
    print("="*60)
    print("–¢–ï–°–¢ 2: –ê–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—è –¥—ñ–∞–≥—Ä–∞–º–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
    print("="*60)

    test_dir, [_, _, fixable_path] = create_test_diagrams()

    importer = DrakonJSONImporter(auto_fix=True, strict_mode=False)
    diagram, was_corrected = importer.import_diagram(fixable_path, save_logs=True)

    assert diagram is not None, "–î—ñ–∞–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–∞ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞"
    assert was_corrected, "–î—ñ–∞–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ _fixed —Ñ–∞–π–ª
    fixed_path = fixable_path.parent / f"{fixable_path.stem}_fixed.json"
    assert fixed_path.exists(), "–ü–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π _fixed —Ñ–∞–π–ª"

    print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù–û\n")


def test_batch_import():
    """–¢–µ—Å—Ç 3: Batch-—ñ–º–ø–æ—Ä—Ç"""
    print("="*60)
    print("–¢–ï–°–¢ 3: Batch-—ñ–º–ø–æ—Ä—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
    print("="*60)

    test_dir, _ = create_test_diagrams()

    importer = DrakonJSONImporter(auto_fix=True)
    results = importer.import_directory(test_dir, save_logs=True)

    assert len(results) >= 3, "–ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ –º—ñ–Ω—ñ–º—É–º 3 —Ñ–∞–π–ª–∏"

    valid_count = sum(1 for _, diagram, _ in results if diagram is not None)
    assert valid_count >= 2, "–Ø–∫ –º—ñ–Ω—ñ–º—É–º 2 –¥—ñ–∞–≥—Ä–∞–º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ"

    print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù–û\n")


def test_strict_mode():
    """–¢–µ—Å—Ç 4: –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º"""
    print("="*60)
    print("–¢–ï–°–¢ 4: –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º (–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö)")
    print("="*60)

    test_dir, [_, invalid_path, _] = create_test_diagrams()

    importer = DrakonJSONImporter(auto_fix=False, strict_mode=True)
    diagram, _ = importer.import_diagram(invalid_path, save_logs=False)

    assert diagram is None, "–£ —Å—Ç—Ä–æ–≥–æ–º—É —Ä–µ–∂–∏–º—ñ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏—Å—å"

    print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù–û\n")


def cleanup():
    """–û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    import shutil
    test_dir = Path("./test_diagrams")
    if test_dir.exists():
        shutil.rmtree(test_dir)
        print("üßπ –¢–µ—Å—Ç–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –æ—á–∏—â–µ–Ω–æ")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("\n" + "="*60)
    print("DRAKON –Ü–ú–ü–û–†–¢–ï–† - –®–í–ò–î–ö–ò–ô –¢–ï–°–¢")
    print("="*60 + "\n")

    try:
        test_single_import()
        test_auto_correction()
        test_batch_import()
        test_strict_mode()

        print("="*60)
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print("="*60)

        # –û—á–∏—â–µ–Ω–Ω—è
        cleanup()

        return 0

    except AssertionError as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù–û: {e}")
        return 1

    except Exception as e:
        print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ê –¢–ï–°–¢–£–í–ê–ù–ù–Ø: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == '__main__':
    sys.exit(main())
