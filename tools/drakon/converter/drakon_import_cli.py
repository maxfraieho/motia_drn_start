#!/usr/bin/env python3
"""
DRAKON JSON Import CLI

–ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π CLI-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó DRAKON JSON –¥—ñ–∞–≥—Ä–∞–º.

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    # –Ü–º–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    python drakon_import_cli.py import diagram.json

    # –Ü–º–ø–æ—Ä—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó (batch)
    python drakon_import_cli.py import ./diagrams/ --batch

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –±–µ–∑ —ñ–º–ø–æ—Ä—Ç—É
    python drakon_import_cli.py validate diagram.json

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏
    python drakon_import_cli.py fix diagram.json

    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥—ñ–∞–≥—Ä–∞–º —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    python drakon_import_cli.py fix ./diagrams/ --batch

–ê–≤—Ç–æ—Ä: Claude Code + Motia AI Pipeline
–î–∞—Ç–∞: 2025-10-11
"""

import argparse
import sys
from pathlib import Path
from typing import Optional
import logging

# –Ü–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç–µ—Ä–∞
from drakon_json_importer import DrakonJSONImporter

# –Ü–º–ø–æ—Ä—Ç —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (–¥–ª—è –æ–∫—Ä–µ–º–∏—Ö –∫–æ–º–∞–Ω–¥)
sys.path.insert(0, str(Path(__file__).parent.parent / 'fix'))
from drakon_tools import DrakonValidator, DrakonCorrector
import json


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
class Colors:
    """ANSI color codes –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É"""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def setup_logging(verbose: bool = False):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(message)s'  # –°–ø—Ä–æ—â–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è CLI
    )


def cmd_import(args):
    """
    –ö–æ–º–∞–Ω–¥–∞: import
    –Ü–º–ø–æ—Ä—Ç DRAKON –¥—ñ–∞–≥—Ä–∞–º –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—î—é
    """
    input_path = Path(args.input)

    if not input_path.exists():
        print(f"{Colors.FAIL}‚ùå –®–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î: {input_path}{Colors.ENDC}")
        return 1

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç–µ—Ä–∞
    importer = DrakonJSONImporter(
        strict_mode=args.strict,
        auto_fix=not args.no_fix
    )

    # Batch –∞–±–æ –æ–¥–∏–Ω–æ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
    if args.batch:
        if not input_path.is_dir():
            print(f"{Colors.FAIL}‚ùå –î–ª—è --batch –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è{Colors.ENDC}")
            return 1

        results = importer.import_directory(
            input_path,
            pattern=args.pattern,
            recursive=args.recursive,
            save_logs=not args.no_logs
        )

        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ–¥—É –ø–æ–º–∏–ª–∫–∏ —è–∫—â–æ –±—É–ª–∏ –Ω–µ–≤–¥–∞–ª—ñ —ñ–º–ø–æ—Ä—Ç–∏
        failed = sum(1 for _, diagram, _ in results if diagram is None)
        return 1 if failed > 0 else 0

    else:
        if not input_path.is_file():
            print(f"{Colors.FAIL}‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {input_path}{Colors.ENDC}")
            return 1

        diagram, was_corrected = importer.import_diagram(
            input_path,
            save_logs=not args.no_logs
        )

        return 0 if diagram is not None else 1


def cmd_validate(args):
    """
    –ö–æ–º–∞–Ω–¥–∞: validate
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥—ñ–∞–≥—Ä–∞–º –±–µ–∑ —ñ–º–ø–æ—Ä—Ç—É (—à–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
    """
    input_path = Path(args.input)

    if not input_path.exists():
        print(f"{Colors.FAIL}‚ùå –®–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î: {input_path}{Colors.ENDC}")
        return 1

    validator = DrakonValidator()

    # Batch –∞–±–æ –æ–¥–∏–Ω–æ—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
    if args.batch:
        if not input_path.is_dir():
            print(f"{Colors.FAIL}‚ùå –î–ª—è --batch –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è{Colors.ENDC}")
            return 1

        files = list(input_path.glob(args.pattern))
        files = [f for f in files if not f.stem.endswith('_fixed')]

        print(f"{Colors.HEADER}üìã –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {input_path}{Colors.ENDC}")
        print(f"–§–∞–π–ª—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {len(files)}\n")

        results = {'valid': 0, 'invalid': 0}

        for file_path in files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    diagram = json.load(f)

                is_valid = validator.validate(diagram)

                if is_valid:
                    print(f"{Colors.OKGREEN}‚úÖ {file_path.name}{Colors.ENDC}")
                    results['valid'] += 1
                else:
                    print(f"{Colors.FAIL}‚ùå {file_path.name}{Colors.ENDC}")
                    if args.verbose:
                        for error in validator.errors:
                            print(f"   - {error}")
                    results['invalid'] += 1

            except Exception as e:
                print(f"{Colors.FAIL}‚ùå {file_path.name} (–ø–æ–º–∏–ª–∫–∞: {e}){Colors.ENDC}")
                results['invalid'] += 1

        print(f"\n{Colors.HEADER}–ü—ñ–¥—Å—É–º–æ–∫:{Colors.ENDC}")
        print(f"‚úÖ –í–∞–ª—ñ–¥–Ω–∏—Ö: {results['valid']}")
        print(f"‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö: {results['invalid']}")

        return 0 if results['invalid'] == 0 else 1

    else:
        # –û–¥–∏–Ω–æ—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
        if not input_path.is_file():
            print(f"{Colors.FAIL}‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {input_path}{Colors.ENDC}")
            return 1

        try:
            with open(input_path, 'r', encoding='utf-8') as f:
                diagram = json.load(f)

            is_valid = validator.validate(diagram)

            print(f"{Colors.HEADER}üìã –í–∞–ª—ñ–¥–∞—Ü—ñ—è: {input_path.name}{Colors.ENDC}\n")

            if is_valid:
                print(f"{Colors.OKGREEN}‚úÖ –î—ñ–∞–≥—Ä–∞–º–∞ –≤–∞–ª—ñ–¥–Ω–∞{Colors.ENDC}")
                return 0
            else:
                print(f"{Colors.FAIL}‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏:{Colors.ENDC}")
                print(validator.get_report())
                return 1

        except json.JSONDecodeError as e:
            print(f"{Colors.FAIL}‚ùå –ü–æ–º–∏–ª–∫–∞ JSON: {e}{Colors.ENDC}")
            return 1
        except Exception as e:
            print(f"{Colors.FAIL}‚ùå –ü–æ–º–∏–ª–∫–∞: {e}{Colors.ENDC}")
            return 1


def cmd_fix(args):
    """
    –ö–æ–º–∞–Ω–¥–∞: fix
    –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º (–±–µ–∑ —ñ–º–ø–æ—Ä—Ç—É, —Ç—ñ–ª—å–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö)
    """
    input_path = Path(args.input)

    if not input_path.exists():
        print(f"{Colors.FAIL}‚ùå –®–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î: {input_path}{Colors.ENDC}")
        return 1

    corrector = DrakonCorrector()
    validator = DrakonValidator()

    # Batch –∞–±–æ –æ–¥–∏–Ω–æ—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    if args.batch:
        if not input_path.is_dir():
            print(f"{Colors.FAIL}‚ùå –î–ª—è --batch –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è{Colors.ENDC}")
            return 1

        files = list(input_path.glob(args.pattern))
        files = [f for f in files if not f.stem.endswith('_fixed')]

        print(f"{Colors.HEADER}üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º —É: {input_path}{Colors.ENDC}")
        print(f"–§–∞–π–ª—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {len(files)}\n")

        results = {'fixed': 0, 'failed': 0, 'valid': 0}

        for file_path in files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    diagram = json.load(f)

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                if validator.validate(diagram):
                    print(f"{Colors.OKGREEN}‚úÖ {file_path.name} (–≤–∂–µ –≤–∞–ª—ñ–¥–Ω–∞){Colors.ENDC}")
                    results['valid'] += 1
                    continue

                # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                corrected = corrector.correct_diagram(diagram)

                # –ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
                if validator.validate(corrected):
                    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                    output_path = args.output or file_path.parent / f"{file_path.stem}_fixed.json"
                    output_path = Path(output_path)

                    if args.batch and args.output:
                        output_path = Path(args.output) / f"{file_path.stem}_fixed.json"

                    with open(output_path, 'w', encoding='utf-8') as f:
                        json.dump(corrected, f, ensure_ascii=False, indent=2)

                    print(f"{Colors.OKGREEN}üîß {file_path.name} ‚Üí {output_path.name}{Colors.ENDC}")
                    results['fixed'] += 1
                else:
                    print(f"{Colors.FAIL}‚ùå {file_path.name} (–Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏){Colors.ENDC}")
                    results['failed'] += 1

            except Exception as e:
                print(f"{Colors.FAIL}‚ùå {file_path.name} (–ø–æ–º–∏–ª–∫–∞: {e}){Colors.ENDC}")
                results['failed'] += 1

        print(f"\n{Colors.HEADER}–ü—ñ–¥—Å—É–º–æ–∫:{Colors.ENDC}")
        print(f"üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: {results['fixed']}")
        print(f"‚úÖ –ë—É–ª–∏ –≤–∞–ª—ñ–¥–Ω—ñ: {results['valid']}")
        print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {results['failed']}")

        return 0 if results['failed'] == 0 else 1

    else:
        # –û–¥–∏–Ω–æ—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        if not input_path.is_file():
            print(f"{Colors.FAIL}‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {input_path}{Colors.ENDC}")
            return 1

        try:
            with open(input_path, 'r', encoding='utf-8') as f:
                diagram = json.load(f)

            print(f"{Colors.HEADER}üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {input_path.name}{Colors.ENDC}\n")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            if validator.validate(diagram):
                print(f"{Colors.OKGREEN}‚úÖ –î—ñ–∞–≥—Ä–∞–º–∞ –≤–∂–µ –≤–∞–ª—ñ–¥–Ω–∞{Colors.ENDC}")
                return 0

            # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            corrected = corrector.correct_diagram(diagram)

            # –ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
            if not validator.validate(corrected):
                print(f"{Colors.FAIL}‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –¥—ñ–∞–≥—Ä–∞–º—É{Colors.ENDC}")
                print(f"\n–ó–∞–ª–∏—à–∏–ª–∏—Å—è –ø–æ–º–∏–ª–∫–∏:")
                for error in validator.errors:
                    print(f"  - {error}")
                return 1

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            output_path = args.output or input_path.parent / f"{input_path.stem}_fixed.json"
            output_path = Path(output_path)

            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(corrected, f, ensure_ascii=False, indent=2)

            print(f"{Colors.OKGREEN}‚úÖ –î—ñ–∞–≥—Ä–∞–º–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞{Colors.ENDC}")
            print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")
            print(f"\n–í–∏–∫–æ–Ω–∞–Ω—ñ –∫–æ—Ä–µ–∫—Ü—ñ—ó:")
            for correction in corrector.corrections:
                print(f"  - {correction}")

            return 0

        except json.JSONDecodeError as e:
            print(f"{Colors.FAIL}‚ùå –ü–æ–º–∏–ª–∫–∞ JSON: {e}{Colors.ENDC}")
            return 1
        except Exception as e:
            print(f"{Colors.FAIL}‚ùå –ü–æ–º–∏–ª–∫–∞: {e}{Colors.ENDC}")
            return 1


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è CLI"""

    parser = argparse.ArgumentParser(
        prog='drakon-import',
        description='DRAKON JSON —ñ–º–ø–æ—Ä—Ç–µ—Ä –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—î—é',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:

  # –Ü–º–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
  %(prog)s import diagram.json

  # –Ü–º–ø–æ—Ä—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
  %(prog)s import ./diagrams/ --batch

  # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –±–µ–∑ —ñ–º–ø–æ—Ä—Ç—É
  %(prog)s validate diagram.json

  # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
  %(prog)s validate ./diagrams/ --batch

  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
  %(prog)s fix diagram.json

  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
  %(prog)s fix ./diagrams/ --batch --output ./fixed/

  # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º (–Ω–µ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ)
  %(prog)s import diagram.json --strict

  # –í–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—é
  %(prog)s import diagram.json --no-fix

–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É:
  %(prog)s <–∫–æ–º–∞–Ω–¥–∞> --help
        """
    )

    # –ü—ñ–¥–∫–æ–º–∞–Ω–¥–∏
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏')

    # === –ö–û–ú–ê–ù–î–ê: import ===
    import_parser = subparsers.add_parser(
        'import',
        help='–Ü–º–ø–æ—Ä—Ç DRAKON –¥—ñ–∞–≥—Ä–∞–º –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—î—é'
    )
    import_parser.add_argument('input', type=str, help='–§–∞–π–ª –∞–±–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è')
    import_parser.add_argument('--batch', action='store_true', help='–û–±—Ä–æ–±–∏—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó')
    import_parser.add_argument('--pattern', default='*.json', help='Glob-–ø–∞—Ç–µ—Ä–Ω (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: *.json)')
    import_parser.add_argument('--recursive', '-r', action='store_true', help='–†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –ø–æ—à—É–∫')
    import_parser.add_argument('--no-fix', action='store_true', help='–í–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—é')
    import_parser.add_argument('--strict', action='store_true', help='–ù–µ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥—ñ–∞–≥—Ä–∞–º–∏')
    import_parser.add_argument('--no-logs', action='store_true', help='–ù–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ª–æ–≥-—Ñ–∞–π–ª–∏')
    import_parser.add_argument('--verbose', '-v', action='store_true', help='–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥')

    # === –ö–û–ú–ê–ù–î–ê: validate ===
    validate_parser = subparsers.add_parser(
        'validate',
        help='–í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥—ñ–∞–≥—Ä–∞–º –±–µ–∑ —ñ–º–ø–æ—Ä—Ç—É (—à–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)'
    )
    validate_parser.add_argument('input', type=str, help='–§–∞–π–ª –∞–±–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è')
    validate_parser.add_argument('--batch', action='store_true', help='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó')
    validate_parser.add_argument('--pattern', default='*.json', help='Glob-–ø–∞—Ç–µ—Ä–Ω (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: *.json)')
    validate_parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏')

    # === –ö–û–ú–ê–ù–î–ê: fix ===
    fix_parser = subparsers.add_parser(
        'fix',
        help='–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º (–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è _fixed —Ñ–∞–π–ª—ñ–≤)'
    )
    fix_parser.add_argument('input', type=str, help='–§–∞–π–ª –∞–±–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è')
    fix_parser.add_argument('--batch', action='store_true', help='–í–∏–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó')
    fix_parser.add_argument('--pattern', default='*.json', help='Glob-–ø–∞—Ç–µ—Ä–Ω (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: *.json)')
    fix_parser.add_argument('--output', '-o', type=str, help='–í–∏—Ö—ñ–¥–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è (–¥–ª—è batch)')
    fix_parser.add_argument('--verbose', '-v', action='store_true', help='–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥')

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    args = parser.parse_args()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
    if not args.command:
        parser.print_help()
        return 1

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    setup_logging(getattr(args, 'verbose', False))

    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
    if args.command == 'import':
        return cmd_import(args)
    elif args.command == 'validate':
        return cmd_validate(args)
    elif args.command == 'fix':
        return cmd_fix(args)
    else:
        parser.print_help()
        return 1


if __name__ == '__main__':
    sys.exit(main())
