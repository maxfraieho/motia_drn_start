#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Motia Markdown Service v1.0
============================
–°–µ—Ä–≤—ñ—Å –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Motia-–ø—Ä–æ—î–∫—Ç–æ–º —Ç–∞ Claude CLI.

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∞–≥—Ä–µ–≥–∞—Ü—ñ—è markdown-—Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Ç—Ä–∏—Å—Ç—É–ø–µ–Ω–µ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:
- Project Context ‚Üí Pattern Context ‚Üí Target Step Context

–ê–≤—Ç–æ—Ä: DevOps Engineer
–í–µ—Ä—Å—ñ—è: 1.0.0
"""

import os
import sys
import json
import shutil
import asyncio
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field


# ============================================================================
# CONFIGURATION
# ============================================================================

@dataclass
class MotiaConfig:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Motia-—Å–µ—Ä–≤—ñ—Å—É"""
    project_root: Path
    patterns_dir: Path
    steps_dir: Path
    output_dir: Path
    step_descriptions_dir: Path

    # –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è
    ignore_dirs: set = field(default_factory=lambda: {
        '.git', 'node_modules', 'venv', '__pycache__', '.vscode',
        '.idea', 'dist', 'build', 'target', '.pytest_cache', 'env', '.env'
    })

    # –°–µ—Ä–≤—ñ—Å–Ω—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è
    service_files: set = field(default_factory=lambda: {
        'codetomd.py', 'codetomd.bat', 'drakon_converter.py',
        'md_to_embeddings_service.py', 'md_to_embeddings_service_v4.py',
        'md-to-embeddings-service.bat', 'run_md_service.sh',
        'run_md_service.bat', '.gitignore', 'package-lock.json',
        'yarn.lock', '.DS_Store', 'Thumbs.db'
    })

    # –í–∞–ª—ñ–¥–Ω—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
    valid_extensions: set = field(default_factory=lambda: {
        '.py', '.js', '.ts', '.html', '.css', '.md', '.txt',
        '.yml', '.yaml', '.json', '.xml', '.sql', '.sh', '.bat',
        '.jsx', '.tsx', '.vue', '.svelte', '.php', '.java', '.cs',
        '.cpp', '.c', '.h', '.hpp', '.rb', '.go', '.rs', '.swift',
        '.drakon'
    })

    @classmethod
    def from_path(cls, project_path: str = ".") -> 'MotiaConfig':
        """–°—Ç–≤–æ—Ä—é—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ —à–ª—è—Ö—É –¥–æ –ø—Ä–æ—î–∫—Ç—É"""
        root = Path(project_path).resolve()
        return cls(
            project_root=root,
            patterns_dir=root / "patterns",
            steps_dir=root / "steps",
            output_dir=root / "output",
            step_descriptions_dir=root / "step-descriptions"
        )


# ============================================================================
# MARKDOWN AGGREGATOR CLASS
# ============================================================================

class MarkdownAggregator:
    """
    –ö–ª–∞—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü—ñ—ó markdown-—Ñ–∞–π–ª—ñ–≤ –∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ—î–∫—Ç—É.

    –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
    - –ó–±—ñ—Ä –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –∑ –ø–∞–ø–æ–∫ –∫—Ä–æ–∫—ñ–≤
    - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –î–†–ê–ö–û–ù-—Å—Ö–µ–º –≤ markdown
    - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —î–¥–∏–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """

    def __init__(self, config: MotiaConfig):
        self.config = config
        self.stats = {
            'files_processed': 0,
            'files_skipped': 0,
            'total_size': 0,
            'drakon_converted': 0
        }

    def aggregate_project_context(self, output_file: str = "motia-project-context.md") -> Path:
        """
        –ê–≥—Ä–µ–≥—É—î –∑–∞–≥–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—î–∫—Ç—É (—Ä—ñ–≤–µ–Ω—å 1).

        –í–∫–ª—é—á–∞—î:
        - motia.md
        - README.md
        - –°—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—î–∫—Ç—É
        - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤
        """
        print("\nüìã –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—Ä–æ—î–∫—Ç—É...")

        output_path = self.config.output_dir / output_file
        self.config.output_dir.mkdir(parents=True, exist_ok=True)

        with open(output_path, 'w', encoding='utf-8') as out:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            out.write("# Motia Project Context\n\n")
            out.write(f"**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            out.write(f"**Project Root**: `{self.config.project_root}`\n\n")
            out.write("---\n\n")

            # Motia.md (–æ—Å–Ω–æ–≤–Ω–∏–π –æ–ø–∏—Å –ø—Ä–æ—î–∫—Ç—É)
            motia_md = self.config.project_root / "motia.md"
            if motia_md.exists():
                out.write("## Motia Project Description\n\n")
                out.write(motia_md.read_text(encoding='utf-8'))
                out.write("\n\n---\n\n")

            # README
            readme = self.config.project_root / "README.md"
            if readme.exists():
                out.write("## Project README\n\n")
                out.write(readme.read_text(encoding='utf-8'))
                out.write("\n\n---\n\n")

            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—î–∫—Ç—É
            out.write("## Project Structure\n\n```\n")
            self._write_tree(out, self.config.project_root, max_depth=3)
            out.write("```\n\n---\n\n")

            # –°–ø–∏—Å–æ–∫ –ø–∞—Ç–µ—Ä–Ω—ñ–≤
            if self.config.patterns_dir.exists():
                out.write("## Available Patterns\n\n")
                patterns = sorted(self.config.patterns_dir.glob("*.md"))
                for pattern in patterns:
                    if pattern.name != "README.md":
                        out.write(f"- {pattern.stem}\n")
                out.write("\n")

        size = output_path.stat().st_size
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {output_path} ({size:,} bytes)")
        return output_path

    def aggregate_pattern_context(self, pattern_name: str,
                                   output_file: Optional[str] = None) -> Path:
        """
        –ê–≥—Ä–µ–≥—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞—Ç–µ—Ä–Ω—É (—Ä—ñ–≤–µ–Ω—å 2).

        Args:
            pattern_name: –ù–∞–∑–≤–∞ –ø–∞—Ç–µ—Ä–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "factory-pattern")
            output_file: –ù–∞–∑–≤–∞ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        """
        print(f"\nüéØ –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø–∞—Ç–µ—Ä–Ω—É: {pattern_name}...")

        if not output_file:
            output_file = f"motia-pattern-{pattern_name}.md"

        output_path = self.config.output_dir / output_file
        pattern_file = self.config.patterns_dir / f"{pattern_name}.md"

        if not pattern_file.exists():
            raise FileNotFoundError(f"–ü–∞—Ç–µ—Ä–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {pattern_file}")

        with open(output_path, 'w', encoding='utf-8') as out:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            out.write(f"# Motia Pattern Context: {pattern_name}\n\n")
            out.write(f"**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            out.write("---\n\n")

            # –í–º—ñ—Å—Ç –ø–∞—Ç–µ—Ä–Ω—É
            out.write(pattern_file.read_text(encoding='utf-8'))
            out.write("\n\n---\n\n")

            # –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ—Å–Ω—É—é—á–∏—Ö –∫—Ä–æ–∫–∞—Ö
            out.write("## Pattern Usage Examples in Existing Steps\n\n")
            self._find_pattern_usage(out, pattern_name)

        size = output_path.stat().st_size
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {output_path} ({size:,} bytes)")
        return output_path

    def aggregate_step_context(self, step_path: str,
                                output_file: Optional[str] = None) -> Path:
        """
        –ê–≥—Ä–µ–≥—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫—Ä–æ–∫—É (—Ä—ñ–≤–µ–Ω—å 3).

        Args:
            step_path: –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∫—Ä–æ–∫—É
            output_file: –ù–∞–∑–≤–∞ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        """
        step_dir = Path(step_path).resolve()
        step_name = step_dir.name

        print(f"\nüîß –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∫—Ä–æ–∫—É: {step_name}...")

        if not output_file:
            output_file = f"{step_name}-complete.md"

        self.config.step_descriptions_dir.mkdir(parents=True, exist_ok=True)
        output_path = self.config.step_descriptions_dir / output_file

        with open(output_path, 'w', encoding='utf-8') as out:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            out.write(f"# Motia Step: {step_name}\n\n")
            out.write(f"**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            out.write(f"**Step Path**: `{step_dir}`\n\n")
            out.write("---\n\n")

            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—Ä–æ–∫—É
            out.write("## Step Structure\n\n```\n")
            self._write_tree(out, step_dir, prefix="", max_depth=5)
            out.write("```\n\n---\n\n")

            # README
            readme = step_dir / "README.md"
            if readme.exists():
                out.write("## Step Description\n\n")
                out.write(readme.read_text(encoding='utf-8'))
                out.write("\n\n---\n\n")

            # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
            self._add_config_files(out, step_dir)

            # –ö–æ–¥ handler
            self._add_handler_code(out, step_dir)

            # –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º–∏
            self._add_drakon_diagrams(out, step_dir)

            # –¢–µ—Å—Ç–∏
            self._add_tests(out, step_dir)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            out.write("---\n\n## Aggregation Statistics\n\n")
            out.write(f"- Files processed: {self.stats['files_processed']}\n")
            out.write(f"- DRAKON diagrams converted: {self.stats['drakon_converted']}\n")
            out.write(f"- Total size: {self.stats['total_size']:,} bytes\n")

        size = output_path.stat().st_size
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {output_path} ({size:,} bytes)")
        print(f"üìä –û–±—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {self.stats['files_processed']}")
        print(f"üìä –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º: {self.stats['drakon_converted']}")

        return output_path

    def _write_tree(self, out, root_dir: Path, prefix: str = "",
                    max_depth: int = 3, current_depth: int = 0):
        """–ó–∞–ø–∏—Å—É—î –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª—ñ–≤"""
        if current_depth >= max_depth:
            return

        try:
            items = sorted(root_dir.iterdir())
            dirs = [i for i in items if i.is_dir() and i.name not in self.config.ignore_dirs
                    and not i.name.startswith('.')]
            files = [i for i in items if i.is_file() and i.name not in self.config.service_files
                     and not i.name.startswith('.')]

            # –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
            for i, directory in enumerate(dirs):
                is_last_dir = (i == len(dirs) - 1) and not files
                out.write(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last_dir else '‚îú‚îÄ‚îÄ '}{directory.name}/\n")
                extension = "    " if is_last_dir else "‚îÇ   "
                self._write_tree(out, directory, prefix + extension, max_depth, current_depth + 1)

            # –§–∞–π–ª–∏ (–º–∞–∫—Å–∏–º—É–º 15)
            display_files = files[:15]
            for i, file in enumerate(display_files):
                is_last = i == len(display_files) - 1 and len(files) <= 15
                out.write(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}{file.name}\n")

            if len(files) > 15:
                out.write(f"{prefix}‚îî‚îÄ‚îÄ ... —Ç–∞ —â–µ {len(files) - 15} —Ñ–∞–π–ª—ñ–≤\n")

        except PermissionError:
            out.write(f"{prefix}‚îî‚îÄ‚îÄ [–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É]\n")

    def _add_config_files(self, out, step_dir: Path):
        """–î–æ–¥–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏"""
        config_files = ['config.json', 'schema.json']

        for config_file in config_files:
            file_path = step_dir / config_file
            if file_path.exists():
                out.write(f"## {config_file}\n\n")
                out.write("```json\n")
                out.write(file_path.read_text(encoding='utf-8'))
                out.write("\n```\n\n---\n\n")
                self.stats['files_processed'] += 1

    def _add_handler_code(self, out, step_dir: Path):
        """–î–æ–¥–∞—î –∫–æ–¥ handler"""
        handlers = list(step_dir.glob("handler.*")) + list(step_dir.glob("*.ts")) + \
                   list(step_dir.glob("*.py"))

        for handler in handlers[:1]:  # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π
            if handler.suffix in self.config.valid_extensions:
                out.write(f"## Handler Code: {handler.name}\n\n")

                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É
                lang_map = {
                    '.ts': 'typescript', '.py': 'python', '.js': 'javascript',
                    '.tsx': 'tsx', '.jsx': 'jsx'
                }
                lang = lang_map.get(handler.suffix, 'text')

                out.write(f"```{lang}\n")
                content = handler.read_text(encoding='utf-8')
                out.write(content)
                out.write("\n```\n\n---\n\n")

                self.stats['files_processed'] += 1
                self.stats['total_size'] += handler.stat().st_size

    def _add_drakon_diagrams(self, out, step_dir: Path):
        """–î–æ–¥–∞—î –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º–∏ –∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—î—é"""
        diagrams_dir = step_dir / "diagrams"

        if not diagrams_dir.exists():
            return

        drakon_files = list(diagrams_dir.glob("*.json")) + \
                       list(diagrams_dir.glob("*.drakon"))

        if drakon_files:
            out.write("## DRAKON Diagrams\n\n")

            for drakon_file in drakon_files:
                try:
                    out.write(f"### {drakon_file.name}\n\n")

                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –î–†–ê–ö–û–ù –≤ –ø—Å–µ–≤–¥–æ–∫–æ–¥/markdown
                    pseudocode = self._convert_drakon_to_pseudocode(drakon_file)
                    out.write("```\n")
                    out.write(pseudocode)
                    out.write("\n```\n\n")

                    self.stats['drakon_converted'] += 1
                    self.stats['files_processed'] += 1

                except Exception as e:
                    out.write(f"[–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}]\n\n")

            out.write("---\n\n")

    def _convert_drakon_to_pseudocode(self, drakon_file: Path) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç—É—î –î–†–ê–ö–û–ù-—Å—Ö–µ–º—É –≤ –ø—Å–µ–≤–¥–æ–∫–æ–¥ –∑–≥—ñ–¥–Ω–æ –∑ –æ–ø–∏—Å–æ–º –º–æ–≤–∏ –î–†–ê–ö–û–ù.

        –í—Ä–∞—Ö–æ–≤—É—î:
        - –Ü–∫–æ–Ω–∏: –í–æ–ø—Ä–æ—Å, –í—ã–±–æ—Ä, –¶–∏–∫–ª –î–õ–Ø, –î–µ–π—Å—Ç–≤–∏–µ
        - –í—ñ–∑—É–∞–ª—å–Ω—ñ –ª–æ–≥—ñ—á–Ω—ñ —Ñ–æ—Ä–º—É–ª–∏
        - –°–∏–ª—É–µ—Ç–∏ —ñ –≤–µ—Ç–∫–∏
        - –ü—Ä–∏–Ω—Ü–∏–ø "—á–µ–º –ø—Ä–∞–≤–µ–µ, —Ç–µ–º —Ö—É–∂–µ"
        """
        try:
            with open(drakon_file, 'r', encoding='utf-8') as f:
                data = json.load(f)

            pseudocode = []
            pseudocode.append(f"–î–†–ê–ö–û–ù-—Å—Ö–µ–º–∞: {drakon_file.stem}")
            pseudocode.append("=" * 60)
            pseudocode.append("")

            # –û–±—Ä–æ–±–∫–∞ –≤—É–∑–ª—ñ–≤ (nodes)
            if 'nodes' in data:
                pseudocode.append("–°–¢–†–£–ö–¢–£–†–ê –ê–õ–ì–û–†–ò–¢–ú–£:")
                pseudocode.append("")

                for node_id, node_data in data.get('nodes', {}).items():
                    node_type = node_data.get('type', 'unknown')
                    content = node_data.get('content', {})

                    if isinstance(content, dict):
                        text = content.get('txt', '').strip()
                    else:
                        text = str(content).strip()

                    # –Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è –∑–≥—ñ–¥–Ω–æ –î–†–ê–ö–û–ù
                    if node_type == 'action':
                        pseudocode.append(f"  ‚îú‚îÄ –î–ï–ô–°–¢ –í–Ü–Ø: {text}")

                    elif node_type == 'question':
                        pseudocode.append(f"  ‚îú‚îÄ –í–û–ü–†–û–°: {text}?")
                        pseudocode.append(f"  ‚îÇ   ‚îú‚îÄ –î–ê: [–ø–µ—Ä–µ—Ö—ñ–¥ –≤–Ω–∏–∑]")
                        pseudocode.append(f"  ‚îÇ   ‚îî‚îÄ –ù–Ü: [–ø–µ—Ä–µ—Ö—ñ–¥ –≤–ø—Ä–∞–≤–æ]")

                    elif node_type == 'loopBegin' or node_type == 'foreach':
                        pseudocode.append(f"  ‚îú‚îÄ –¶–ò–ö–õ –î–õ–Ø: {text}")
                        pseudocode.append(f"  ‚îÇ   ‚îî‚îÄ [—Ç—ñ–ª–æ —Ü–∏–∫–ª—É]")

                    elif node_type == 'case' or node_type == 'select':
                        pseudocode.append(f"  ‚îú‚îÄ –í–ò–ë–Ü–†: {text}")
                        pseudocode.append(f"  ‚îÇ   ‚îî‚îÄ [–≤–∞—Ä—ñ–∞–Ω—Ç–∏]")

                    elif node_type == 'branch':
                        pseudocode.append(f"  ‚îú‚îÄ –í–ï–¢–ö–ê: {text}")

                    elif node_type == 'address':
                        pseudocode.append(f"  ‚îî‚îÄ –ê–î–†–ï–°: {text}")

                    elif text:
                        pseudocode.append(f"  ‚îú‚îÄ {node_type.upper()}: {text}")

            # –û–±—Ä–æ–±–∫–∞ –∑–≤'—è–∑–∫—ñ–≤ (edges)
            if 'edges' in data:
                pseudocode.append("")
                pseudocode.append("–ü–û–¢–Ü–ö –í–ò–ö–û–ù–ê–ù–ù–Ø:")
                pseudocode.append("")

                for edge in data.get('edges', []):
                    src = edge.get('src', '?')
                    dst = edge.get('dst', '?')
                    label = edge.get('label', '')

                    if label:
                        pseudocode.append(f"  {src} --[{label}]--> {dst}")
                    else:
                        pseudocode.append(f"  {src} --> {dst}")

            pseudocode.append("")
            pseudocode.append("=" * 60)

            return "\n".join(pseudocode)

        except json.JSONDecodeError:
            return f"[–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ JSON –≤ {drakon_file.name}]"
        except Exception as e:
            return f"[–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}]"

    def _add_tests(self, out, step_dir: Path):
        """–î–æ–¥–∞—î —Ç–µ—Å—Ç–∏"""
        tests_dir = step_dir / "tests"

        if not tests_dir.exists():
            return

        test_files = list(tests_dir.glob("*.ts")) + list(tests_dir.glob("*.py"))

        if test_files:
            out.write("## Tests\n\n")

            for test_file in test_files:
                out.write(f"### {test_file.name}\n\n")

                lang = 'typescript' if test_file.suffix == '.ts' else 'python'
                out.write(f"```{lang}\n")
                out.write(test_file.read_text(encoding='utf-8'))
                out.write("\n```\n\n")

                self.stats['files_processed'] += 1

            out.write("---\n\n")

    def _find_pattern_usage(self, out, pattern_name: str):
        """–®—É–∫–∞—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞—Ç–µ—Ä–Ω—É –≤ —ñ—Å–Ω—É—é—á–∏—Ö –∫—Ä–æ–∫–∞—Ö"""
        if not self.config.steps_dir.exists():
            out.write("_–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è steps/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞_\n\n")
            return

        found_examples = []

        for step_dir in self.config.steps_dir.iterdir():
            if not step_dir.is_dir():
                continue

            # –®—É–∫–∞—î–º–æ –∑–≥–∞–¥–∫–∏ –ø–∞—Ç–µ—Ä–Ω—É –≤ README
            readme = step_dir / "README.md"
            if readme.exists():
                content = readme.read_text(encoding='utf-8').lower()
                if pattern_name.lower() in content:
                    found_examples.append(step_dir.name)

        if found_examples:
            out.write("–ó–Ω–∞–π–¥–µ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫—Ä–æ–∫–∞—Ö:\n\n")
            for example in found_examples:
                out.write(f"- `{example}`\n")
        else:
            out.write("_–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ_\n")

        out.write("\n")


# ============================================================================
# ENVIRONMENT DEPLOYER CLASS
# ============================================================================

class EnvironmentDeployer:
    """
    –ö–ª–∞—Å –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Motia.

    –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
    - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    - –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
    - –ü—ñ–¥–≥–æ—Ç–æ–≤–∫—É —à–∞–±–ª–æ–Ω—ñ–≤
    """

    def __init__(self, config: MotiaConfig):
        self.config = config

    def deploy_structure(self) -> bool:
        """–†–æ–∑–≥–æ—Ä—Ç–∞—î –±–∞–∑–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É Motia-–ø—Ä–æ—î–∫—Ç—É"""
        print("\nüöÄ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ Motia...")

        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
            directories = [
                self.config.patterns_dir,
                self.config.steps_dir,
                self.config.output_dir,
                self.config.step_descriptions_dir
            ]

            for directory in directories:
                directory.mkdir(parents=True, exist_ok=True)
                print(f"  ‚úÖ {directory.relative_to(self.config.project_root)}/")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            self._create_motia_config()

            print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∞!")
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è: {e}")
            return False

    def _create_motia_config(self):
        """–°—Ç–≤–æ—Ä—é—î –±–∞–∑–æ–≤–∏–π –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª motia.json"""
        config_file = self.config.project_root / "motia-config.json"

        if config_file.exists():
            print(f"  ‚è≠Ô∏è  –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î: {config_file.name}")
            return

        config_data = {
            "version": "1.0.0",
            "name": self.config.project_root.name,
            "description": "Motia AI-powered project structure",
            "created": datetime.now().isoformat(),
            "directories": {
                "patterns": str(self.config.patterns_dir.relative_to(self.config.project_root)),
                "steps": str(self.config.steps_dir.relative_to(self.config.project_root)),
                "output": str(self.config.output_dir.relative_to(self.config.project_root)),
                "step_descriptions": str(self.config.step_descriptions_dir.relative_to(self.config.project_root))
            }
        }

        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, indent=2, ensure_ascii=False)

        print(f"  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {config_file.name}")


# ============================================================================
# CLAUDE STEP PREPARATOR CLASS
# ============================================================================

class ClaudeStepPreparator:
    """
    –ö–ª–∞—Å –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è Claude CLI.

    –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
    - –¢—Ä–∏—Å—Ç—É–ø–µ–Ω–µ–≤—É –∞–≥—Ä–µ–≥–∞—Ü—ñ—é (Project ‚Üí Pattern ‚Üí Step)
    - –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –¥–ª—è Claude CLI
    - –ü—ñ–¥–≥–æ—Ç–æ–≤–∫—É –ø—Ä–æ–º–ø—Ç—ñ–≤
    """

    def __init__(self, config: MotiaConfig, aggregator: MarkdownAggregator):
        self.config = config
        self.aggregator = aggregator

    async def prepare_three_level_context(self, pattern_name: str,
                                          step_path: str) -> Dict[str, Path]:
        """
        –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∏—Å—Ç—É–ø–µ–Ω–µ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è Claude CLI.

        Args:
            pattern_name: –ù–∞–∑–≤–∞ –ø–∞—Ç–µ—Ä–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "factory-pattern")
            step_path: –®–ª—è—Ö –¥–æ –∫—Ä–æ–∫—É

        Returns:
            Dict –∑ —à–ª—è—Ö–∞–º–∏ –¥–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        """
        print("\nüéØ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∏—Å—Ç—É–ø–µ–Ω–µ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è Claude CLI...")
        print("=" * 70)

        contexts = {}

        # –†—ñ–≤–µ–Ω—å 1: Project Context
        print("\n[1/3] –†—ñ–≤–µ–Ω—å 1: Project Context")
        contexts['project'] = self.aggregator.aggregate_project_context()

        # –†—ñ–≤–µ–Ω—å 2: Pattern Context
        print("\n[2/3] –†—ñ–≤–µ–Ω—å 2: Pattern Context")
        contexts['pattern'] = self.aggregator.aggregate_pattern_context(pattern_name)

        # –†—ñ–≤–µ–Ω—å 3: Step Context
        print("\n[3/3] –†—ñ–≤–µ–Ω—å 3: Step Context")
        contexts['step'] = self.aggregator.aggregate_step_context(step_path)

        print("\n" + "=" * 70)
        print("‚úÖ –¢—Ä–∏—Å—Ç—É–ø–µ–Ω–µ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ!")

        return contexts

    def generate_claude_command(self, contexts: Dict[str, Path],
                                task_description: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–∏–∫–ª–∏–∫—É Claude CLI.

        Args:
            contexts: –°–ª–æ–≤–Ω–∏–∫ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
            task_description: –û–ø–∏—Å –∑–∞–¥–∞—á—ñ –¥–ª—è Claude

        Returns:
            –ì–æ—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        """
        if not task_description:
            task_description = "–û–ø—Ç–∏–º—ñ–∑—É–π –∫–æ–¥ –∫—Ä–æ–∫—É –∑–≥—ñ–¥–Ω–æ –∑ –ø–∞—Ç–µ—Ä–Ω–æ–º —Ç–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é –ø—Ä–æ—î–∫—Ç—É"

        # –§–æ—Ä–º—É—î–º–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è Claude CLI
        cmd_parts = [
            "claude",
            "--context-file", f'"{contexts["project"]}"',
            "--context-file", f'"{contexts["pattern"]}"',
            "--context-file", f'"{contexts["step"]}"',
            "--prompt", f'"{task_description}"'
        ]

        command = " ".join(cmd_parts)

        print("\nüìã –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è Claude CLI:")
        print("=" * 70)
        print(command)
        print("=" * 70)

        return command

    async def execute_claude_pipeline(self, pattern_name: str, step_path: str,
                                      task_description: str = "",
                                      auto_execute: bool = False) -> Optional[str]:
        """
        –í–∏–∫–æ–Ω—É—î –ø–æ–≤–Ω–∏–π pipeline: –∞–≥—Ä–µ–≥–∞—Ü—ñ—è ‚Üí –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ ‚Üí –≤–∏–∫–ª–∏–∫ Claude CLI.

        Args:
            pattern_name: –ù–∞–∑–≤–∞ –ø–∞—Ç–µ—Ä–Ω—É
            step_path: –®–ª—è—Ö –¥–æ –∫—Ä–æ–∫—É
            task_description: –û–ø–∏—Å –∑–∞–¥–∞—á—ñ
            auto_execute: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º False)

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è Claude CLI –∞–±–æ None
        """
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        contexts = await self.prepare_three_level_context(pattern_name, step_path)

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥–∏
        command = self.generate_claude_command(contexts, task_description)

        if not auto_execute:
            print("\nüí° –ö–æ–º–∞–Ω–¥—É –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ. –°–∫–æ–ø—ñ—é–π—Ç–µ —Ç–∞ –≤–∏–∫–æ–Ω–∞–π—Ç–µ –≤—Ä—É—á–Ω—É.")
            return None

        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è
        print("\nüöÄ –í–∏–∫–æ–Ω–∞–Ω–Ω—è Claude CLI...")
        try:
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=300  # 5 —Ö–≤–∏–ª–∏–Ω timeout
            )

            if result.returncode == 0:
                print("‚úÖ Claude CLI –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                return result.stdout
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {result.stderr}")
                return None

        except subprocess.TimeoutExpired:
            print("‚ùå Timeout: Claude CLI –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º 5 —Ö–≤–∏–ª–∏–Ω")
            return None
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return None


# ============================================================================
# CLI MENU
# ============================================================================

def show_menu():
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    print("\n" + "=" * 70)
    print("    ü§ñ MOTIA MARKDOWN SERVICE v1.0 - Claude CLI Integration")
    print("=" * 70)
    print("\nüìã –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç:")
    print()
    print("  1. üöÄ –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Motia-–ø—Ä–æ—î–∫—Ç—É")
    print("  2. üìã –ê–≥—Ä–µ–≥—É–≤–∞—Ç–∏ Project Context (—Ä—ñ–≤–µ–Ω—å 1)")
    print("  3. üéØ –ê–≥—Ä–µ–≥—É–≤–∞—Ç–∏ Pattern Context (—Ä—ñ–≤–µ–Ω—å 2)")
    print("  4. üîß –ê–≥—Ä–µ–≥—É–≤–∞—Ç–∏ Step Context (—Ä—ñ–≤–µ–Ω—å 3)")
    print("  5. üéØ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª: –¢—Ä–∏—Å—Ç—É–ø–µ–Ω–µ–≤–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è Claude CLI")
    print("  6. üå≥ –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ—î–∫—Ç—É")
    print("  7. üö™ –í–∏—Ö—ñ–¥")
    print()
    print("=" * 70)


async def option_5_full_pipeline(config: MotiaConfig):
    """–í–∞—Ä—ñ–∞–Ω—Ç 5: –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è Claude CLI"""
    print("\nüéØ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ç—Ä–∏—Å—Ç—É–ø–µ–Ω–µ–≤–æ—ó –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏")
    print("=" * 70)

    # –ó–∞–ø–∏—Ç—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    pattern_name = input("\nüìå –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–∞—Ç–µ—Ä–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, factory-pattern): ").strip()
    step_path = input("üìÅ –í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ –∫—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ./steps/my-step): ").strip()
    task = input("üìù –û–ø–∏—Å –∑–∞–¥–∞—á—ñ –¥–ª—è Claude (Enter –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ): ").strip()

    if not pattern_name or not step_path:
        print("‚ùå –ü–∞—Ç–µ—Ä–Ω —Ç–∞ —à–ª—è—Ö –¥–æ –∫—Ä–æ–∫—É –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ!")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å–∏
    aggregator = MarkdownAggregator(config)
    preparator = ClaudeStepPreparator(config, aggregator)

    # –í–∏–∫–æ–Ω—É—î–º–æ pipeline
    await preparator.execute_claude_pipeline(
        pattern_name=pattern_name,
        step_path=step_path,
        task_description=task,
        auto_execute=False  # –ù–µ –≤–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, —Ç—ñ–ª—å–∫–∏ –≥–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥—É
    )

    input("\n‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ Motia Markdown Service v1.0")
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ—î–∫—Ç—É
    project_path = input("\nüìÅ –í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ Motia-–ø—Ä–æ—î–∫—Ç—É (Enter –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó): ").strip()
    if not project_path:
        project_path = "."

    config = MotiaConfig.from_path(project_path)
    print(f"üìÅ –†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {config.project_root}")

    while True:
        try:
            show_menu()
            choice = input("üëâ –í–∞—à –≤–∏–±—ñ—Ä (1-7): ").strip()

            if choice == "1":
                deployer = EnvironmentDeployer(config)
                deployer.deploy_structure()
                input("\n‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            elif choice == "2":
                aggregator = MarkdownAggregator(config)
                aggregator.aggregate_project_context()
                input("\n‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            elif choice == "3":
                pattern = input("\nüìå –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–∞—Ç–µ—Ä–Ω—É: ").strip()
                if pattern:
                    aggregator = MarkdownAggregator(config)
                    aggregator.aggregate_pattern_context(pattern)
                input("\n‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            elif choice == "4":
                step = input("\nüìÅ –í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ –∫—Ä–æ–∫—É: ").strip()
                if step:
                    aggregator = MarkdownAggregator(config)
                    aggregator.aggregate_step_context(step)
                input("\n‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            elif choice == "5":
                await option_5_full_pipeline(config)

            elif choice == "6":
                print("\nüìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—î–∫—Ç—É:")
                print("=" * 70)
                aggregator = MarkdownAggregator(config)
                import io
                buffer = io.StringIO()
                aggregator._write_tree(buffer, config.project_root)
                print(buffer.getvalue())
                input("\n‚úÖ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

            elif choice == "7":
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                print("üìä –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Motia Markdown Service!")
                break

            else:
                print("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –û–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 7.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")


if __name__ == "__main__":
    asyncio.run(main())
