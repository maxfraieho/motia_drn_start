#!/usr/bin/env python3
"""
DRAKON JSON –Ü–º–ø–æ—Ä—Ç–µ—Ä –∑ –í–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –ê–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—î—é

–Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π —ñ–º–ø–æ—Ä—Ç–µ—Ä DRAKON JSON –¥—ñ–∞–≥—Ä–∞–º –∑:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —á–µ—Ä–µ–∑ DrakonValidator
- –ê–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—î—é –ø–æ–º–∏–ª–æ–∫ —á–µ—Ä–µ–∑ DrakonCorrector
- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –¥—ñ–∞–≥—Ä–∞–º —ñ–∑ —Å—É—Ñ—ñ–∫—Å–æ–º _fixed
- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—î—é –ª–æ–≥-—Ñ–∞–π–ª—ñ–≤ –±—ñ–ª—è –¥—ñ–∞–≥—Ä–∞–º
- Batch-–æ–±—Ä–æ–±–∫–æ—é –≤—Å—ñ—Ö JSON —Ñ–∞–π–ª—ñ–≤ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó

–ê–≤—Ç–æ—Ä: Claude Code + Motia AI Pipeline
–î–∞—Ç–∞: 2025-10-11
"""

import json
import sys
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime
import logging

# –Ü–º–ø–æ—Ä—Ç –∫–ª–∞—Å—ñ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—ó
# INTEGRATION POINT: –î–æ–¥–∞–π—Ç–µ sys.path —è–∫—â–æ drakon_tools.py –≤ —ñ–Ω—à—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
sys.path.insert(0, str(Path(__file__).parent.parent / 'fix'))
from drakon_tools import DrakonValidator, DrakonCorrector, DrakonAnalyzer


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class DrakonJSONImporter:
    """
    –Ü–º–ø–æ—Ä—Ç–µ—Ä DRAKON JSON –¥—ñ–∞–≥—Ä–∞–º –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—î—é

    –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
    - –ß–∏—Ç–∞–Ω–Ω—è JSON —Ñ–∞–π–ª—ñ–≤ –¥—ñ–∞–≥—Ä–∞–º
    - –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —á–µ—Ä–µ–∑ DrakonValidator
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —á–µ—Ä–µ–∑ DrakonCorrector
    - –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –¥—ñ–∞–≥—Ä–∞–º (_fixed.json)
    - –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ª–æ–≥-—Ñ–∞–π–ª—ñ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—ó
    - Batch-–æ–±—Ä–æ–±–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    """

    def __init__(self, strict_mode: bool = False, auto_fix: bool = True):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç–µ—Ä–∞

        Args:
            strict_mode: –Ø–∫—â–æ True, –Ω–µ —ñ–º–ø–æ—Ä—Ç—É—î –¥—ñ–∞–≥—Ä–∞–º–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏ –±–µ–∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            auto_fix: –Ø–∫—â–æ True, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –¥—ñ–∞–≥—Ä–∞–º–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏
        """
        self.validator = DrakonValidator()
        self.corrector = DrakonCorrector()
        self.analyzer = DrakonAnalyzer()
        self.strict_mode = strict_mode
        self.auto_fix = auto_fix

        self.stats = {
            'total': 0,
            'valid': 0,
            'corrected': 0,
            'failed': 0
        }

    def import_diagram(
        self,
        file_path: Path,
        save_logs: bool = True
    ) -> Tuple[Optional[Dict[str, Any]], bool]:
        """
        –Ü–º–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É DRAKON –¥—ñ–∞–≥—Ä–∞–º–∏

        –ü—Ä–æ—Ü–µ—Å:
        1. –ß–∏—Ç–∞–Ω–Ω—è JSON —Ñ–∞–π–ª—É
        2. –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        3. –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∏ ‚Üí –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—è (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
        4. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏ (_fixed.json)
        5. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ª–æ–≥-—Ñ–∞–π–ª—ñ–≤

        Args:
            file_path: –®–ª—è—Ö –¥–æ JSON —Ñ–∞–π–ª—É –¥—ñ–∞–≥—Ä–∞–º–∏
            save_logs: –ß–∏ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ª–æ–≥-—Ñ–∞–π–ª–∏

        Returns:
            Tuple[–¥—ñ–∞–≥—Ä–∞–º–∞, —á–∏ –±—É–ª–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞]
            - –¥—ñ–∞–≥—Ä–∞–º–∞: Dict –∑ –¥–∞–Ω–∏–º–∏ –¥—ñ–∞–≥—Ä–∞–º–∏ –∞–±–æ None —è–∫—â–æ —ñ–º–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è
            - –±—É–ª–∞_–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞: True —è–∫—â–æ –¥—ñ–∞–≥—Ä–∞–º–∞ –±—É–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞
        """
        file_path = Path(file_path)
        self.stats['total'] += 1

        logger.info(f"üì• –Ü–º–ø–æ—Ä—Ç –¥—ñ–∞–≥—Ä–∞–º–∏: {file_path.name}")

        # –ö—Ä–æ–∫ 1: –ß–∏—Ç–∞–Ω–Ω—è JSON
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                diagram = json.load(f)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ JSON: {e}")
            self.stats['failed'] += 1
            return None, False
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
            self.stats['failed'] += 1
            return None, False

        # –ö—Ä–æ–∫ 2: –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        is_valid = self.validator.validate(diagram)

        if is_valid:
            logger.info(f"‚úÖ –î—ñ–∞–≥—Ä–∞–º–∞ –≤–∞–ª—ñ–¥–Ω–∞: {file_path.name}")
            self.stats['valid'] += 1

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥-—Ñ–∞–π–ª—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            if save_logs:
                self._save_validation_log(file_path, success=True)

            return diagram, False

        # –î—ñ–∞–≥—Ä–∞–º–∞ –º–∞—î –ø–æ–º–∏–ª–∫–∏
        logger.warning(f"‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:")
        for error in self.validator.errors:
            logger.warning(f"   - {error}")

        # –ö—Ä–æ–∫ 3: –ê–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—è (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
        if not self.auto_fix:
            logger.error(f"‚ùå –ê–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—è –≤–∏–º–∫–Ω–µ–Ω–∞, –¥—ñ–∞–≥—Ä–∞–º–∞ –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞")
            self.stats['failed'] += 1

            if save_logs:
                self._save_validation_log(file_path, success=False)

            return None, False

        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏
        logger.info(f"üîß –í–∏–∫–æ–Ω—É—é –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—é...")
        corrected_diagram = self.corrector.correct_diagram(diagram)

        # –ö—Ä–æ–∫ 4: –ü–æ–≤—Ç–æ—Ä–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
        is_fixed = self.validator.validate(corrected_diagram)

        if not is_fixed:
            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –¥—ñ–∞–≥—Ä–∞–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ")
            logger.error(f"   –ó–∞–ª–∏—à–∏–ª–∏—Å—è –ø–æ–º–∏–ª–∫–∏:")
            for error in self.validator.errors:
                logger.error(f"   - {error}")

            self.stats['failed'] += 1

            if save_logs:
                self._save_validation_log(file_path, success=False)
                self._save_correction_log(file_path, success=False)

            if self.strict_mode:
                return None, False
            else:
                # –£ –Ω–µ—Å—Ç—Ä–æ–≥–æ–º—É —Ä–µ–∂–∏–º—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—É (–∞–ª–µ –Ω–µ –≤–∞–ª—ñ–¥–Ω—É) –¥—ñ–∞–≥—Ä–∞–º—É
                return corrected_diagram, True

        # –î—ñ–∞–≥—Ä–∞–º–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞
        logger.info(f"‚úÖ –î—ñ–∞–≥—Ä–∞–º–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        logger.info(f"   –í–∏–∫–æ–Ω–∞–Ω–æ –∫–æ—Ä–µ–∫—Ü—ñ–π: {len(self.corrector.corrections)}")
        for correction in self.corrector.corrections:
            logger.info(f"   - {correction}")

        self.stats['corrected'] += 1

        # –ö—Ä–æ–∫ 5: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
        fixed_path = self._save_fixed_diagram(file_path, corrected_diagram)
        logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—É –¥—ñ–∞–≥—Ä–∞–º—É: {fixed_path.name}")

        # –ö—Ä–æ–∫ 6: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥-—Ñ–∞–π–ª—ñ–≤
        if save_logs:
            self._save_validation_log(file_path, success=True, was_corrected=True)
            self._save_correction_log(file_path, success=True)

        return corrected_diagram, True

    def import_directory(
        self,
        directory: Path,
        pattern: str = "*.json",
        recursive: bool = False,
        save_logs: bool = True
    ) -> List[Tuple[Path, Optional[Dict[str, Any]], bool]]:
        """
        Batch-–æ–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö JSON —Ñ–∞–π–ª—ñ–≤ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó

        Args:
            directory: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
            pattern: Glob-–ø–∞—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É —Ñ–∞–π–ª—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "*.json")
            recursive: –ß–∏ —à—É–∫–∞—Ç–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤ –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è—Ö
            save_logs: –ß–∏ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ª–æ–≥-—Ñ–∞–π–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ (—à–ª—è—Ö, –¥—ñ–∞–≥—Ä–∞–º–∞, —á–∏_–±—É–ª–∞_–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞)
        """
        directory = Path(directory)

        if not directory.exists():
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ —ñ—Å–Ω—É—î: {directory}")
            return []

        # –ü–æ—à—É–∫ JSON —Ñ–∞–π–ª—ñ–≤
        if recursive:
            files = list(directory.rglob(pattern))
        else:
            files = list(directory.glob(pattern))

        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è: –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ _fixed —Ñ–∞–π–ª–∏
        files = [f for f in files if not f.stem.endswith('_fixed')]

        logger.info(f"üìÇ Batch-–æ–±—Ä–æ–±–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {directory}")
        logger.info(f"   –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len(files)}")

        results = []

        for file_path in files:
            diagram, was_corrected = self.import_diagram(file_path, save_logs=save_logs)
            results.append((file_path, diagram, was_corrected))
            print()  # –†–æ–∑–¥—ñ–ª—é–≤–∞—á –º—ñ–∂ —Ñ–∞–π–ª–∞–º–∏

        # –í–∏–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._print_summary()

        return results

    def _save_fixed_diagram(
        self,
        original_path: Path,
        diagram: Dict[str, Any]
    ) -> Path:
        """
        –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏ –∑ —Å—É—Ñ—ñ–∫—Å–æ–º _fixed

        Args:
            original_path: –®–ª—è—Ö –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            diagram: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥—ñ–∞–≥—Ä–∞–º–∞

        Returns:
            –®–ª—è—Ö –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        """
        fixed_path = original_path.parent / f"{original_path.stem}_fixed.json"

        with open(fixed_path, 'w', encoding='utf-8') as f:
            json.dump(diagram, f, ensure_ascii=False, indent=2)

        return fixed_path

    def _save_validation_log(
        self,
        diagram_path: Path,
        success: bool,
        was_corrected: bool = False
    ):
        """
        –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥-—Ñ–∞–π–ª—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –±—ñ–ª—è –¥—ñ–∞–≥—Ä–∞–º–∏

        Args:
            diagram_path: –®–ª—è—Ö –¥–æ –¥—ñ–∞–≥—Ä–∞–º–∏
            success: –ß–∏ –ø—Ä–æ–π—à–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
            was_corrected: –ß–∏ –±—É–ª–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞
        """
        log_path = diagram_path.parent / f"{diagram_path.stem}_validation.log"

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        with open(log_path, 'w', encoding='utf-8') as f:
            f.write(f"=== DRAKON VALIDATION LOG ===\n")
            f.write(f"Timestamp: {timestamp}\n")
            f.write(f"File: {diagram_path.name}\n")
            f.write(f"Status: {'‚úÖ PASS' if success else '‚ùå FAIL'}\n")

            if was_corrected:
                f.write(f"Note: –î—ñ–∞–≥—Ä–∞–º–∞ –±—É–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞\n")

            f.write(f"\n{self.validator.get_report()}\n")

    def _save_correction_log(
        self,
        diagram_path: Path,
        success: bool
    ):
        """
        –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥-—Ñ–∞–π–ª—É –∫–æ—Ä–µ–∫—Ü—ñ—ó –±—ñ–ª—è –¥—ñ–∞–≥—Ä–∞–º–∏

        Args:
            diagram_path: –®–ª—è—Ö –¥–æ –¥—ñ–∞–≥—Ä–∞–º–∏
            success: –ß–∏ —É—Å–ø—ñ—à–Ω–∞ –±—É–ª–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è
        """
        log_path = diagram_path.parent / f"{diagram_path.stem}_correction.log"

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        with open(log_path, 'w', encoding='utf-8') as f:
            f.write(f"=== DRAKON CORRECTION LOG ===\n")
            f.write(f"Timestamp: {timestamp}\n")
            f.write(f"File: {diagram_path.name}\n")
            f.write(f"Status: {'‚úÖ SUCCESS' if success else '‚ùå FAILED'}\n\n")
            f.write(f"{self.corrector.get_corrections_report()}\n")

    def _print_summary(self):
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–æ–±–∫–∏"""
        logger.info("=" * 60)
        logger.info("üìä –ü–Ü–î–°–£–ú–ö–û–í–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info("=" * 60)
        logger.info(f"–í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ:        {self.stats['total']}")
        logger.info(f"‚úÖ –í–∞–ª—ñ–¥–Ω–∏—Ö:              {self.stats['valid']}")
        logger.info(f"üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ:            {self.stats['corrected']}")
        logger.info(f"‚ùå –ü–æ–º–∏–ª–æ–∫:               {self.stats['failed']}")
        logger.info("=" * 60)


def main():
    """
    CLI Entry Point (–±–∞–∑–æ–≤–∏–π –ø—Ä–∏–∫–ª–∞–¥)

    –ü–æ–≤–Ω–∏–π CLI –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –æ–∫—Ä–µ–º–æ —á–µ—Ä–µ–∑ drakon_import_cli.py
    """
    import argparse

    parser = argparse.ArgumentParser(
        description='DRAKON JSON –Ü–º–ø–æ—Ä—Ç–µ—Ä –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—î—é',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument(
        'input',
        type=Path,
        help='–®–ª—è—Ö –¥–æ JSON —Ñ–∞–π–ª—É –∞–±–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó'
    )

    parser.add_argument(
        '--batch',
        action='store_true',
        help='–û–±—Ä–æ–±–∏—Ç–∏ –≤—Å—ñ JSON —Ñ–∞–π–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó'
    )

    parser.add_argument(
        '--no-fix',
        action='store_true',
        help='–í–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—é'
    )

    parser.add_argument(
        '--strict',
        action='store_true',
        help='–°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: –Ω–µ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥—ñ–∞–≥—Ä–∞–º–∏'
    )

    parser.add_argument(
        '--no-logs',
        action='store_true',
        help='–ù–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ª–æ–≥-—Ñ–∞–π–ª–∏'
    )

    args = parser.parse_args()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç–µ—Ä–∞
    importer = DrakonJSONImporter(
        strict_mode=args.strict,
        auto_fix=not args.no_fix
    )

    # –û–±—Ä–æ–±–∫–∞
    if args.batch:
        if not args.input.is_dir():
            logger.error(f"‚ùå –î–ª—è --batch –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è, –æ—Ç—Ä–∏–º–∞–Ω–æ: {args.input}")
            return 1

        importer.import_directory(
            args.input,
            save_logs=not args.no_logs
        )
    else:
        if not args.input.is_file():
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {args.input}")
            return 1

        diagram, was_corrected = importer.import_diagram(
            args.input,
            save_logs=not args.no_logs
        )

        if diagram is None:
            return 1

    return 0


if __name__ == '__main__':
    sys.exit(main())
