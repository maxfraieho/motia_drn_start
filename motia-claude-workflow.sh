#!/bin/bash

# –Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π workflow –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Motia Steps —á–µ—Ä–µ–∑ Claude CLI
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./motia-claude-workflow.sh <action> [parameters...]

ACTION=$1

show_help() {
    echo "Motia Claude CLI Workflow - –Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫—Ä–æ–∫–∞–º–∏"
    echo ""
    echo "Usage: $0 <action> [parameters...]"
    echo ""
    echo "Actions:"
    echo "  create-desc <name> <type> <pattern> <description> [lang]"
    echo "    –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –æ–ø–∏—Å –∫—Ä–æ–∫—É"
    echo ""
    echo "  aggregate <step-folder> [output-name]"
    echo "    –ê–≥—Ä–µ–≥—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á—É –ø–∞–ø–∫—É –∫—Ä–æ–∫—É –≤ markdown"
    echo ""
    echo "  generate <step-description-file> [pattern]"
    echo "    –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–æ–¥ —á–µ—Ä–µ–∑ Claude CLI"
    echo ""
    echo "  full-cycle <name> <type> <pattern> <description> [lang]"
    echo "    –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª: —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–ø–∏—Å + –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–æ–¥"
    echo ""
    echo "  aggregate-and-generate <step-folder> [pattern]"
    echo "    –ê–≥—Ä–µ–≥—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á—É –ø–∞–ø–∫—É + –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–¥"
    echo ""
    echo "Examples:"
    echo "  $0 create-desc user-processor event observer '–û–±—Ä–æ–±–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'"
    echo "  $0 aggregate ./existing-step user-step-full"
    echo "  $0 generate step-descriptions/user-processor-description.md observer"
    echo "  $0 full-cycle order-api api command 'CRUD API –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å'"
    echo "  $0 aggregate-and-generate ./legacy-step command"
}

case $ACTION in
    "create-desc")
        STEP_NAME=$2
        STEP_TYPE=$3
        PATTERN=$4
        DESCRIPTION=$5
        LANGUAGE=${6:-typescript}

        if [ -z "$STEP_NAME" ] || [ -z "$STEP_TYPE" ] || [ -z "$PATTERN" ] || [ -z "$DESCRIPTION" ]; then
            echo "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è create-desc"
            show_help
            exit 1
        fi

        echo "üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Å—É –∫—Ä–æ–∫—É..."
        ./create-step-description.sh "$STEP_NAME" "$STEP_TYPE" "$PATTERN" "$DESCRIPTION" "$LANGUAGE"
        ;;

    "aggregate")
        STEP_FOLDER=$2
        OUTPUT_NAME=${3:-"$(basename $STEP_FOLDER)-complete"}

        if [ -z "$STEP_FOLDER" ] || [ ! -d "$STEP_FOLDER" ]; then
            echo "‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞ –∫—Ä–æ–∫—É: $STEP_FOLDER"
            show_help
            exit 1
        fi

        echo "üì¶ –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –ø–∞–ø–∫–∏ –∫—Ä–æ–∫—É..."
        ./aggregate-step-to-md.sh "$STEP_FOLDER" "$OUTPUT_NAME"
        ;;

    "generate")
        DESCRIPTION_FILE=$2
        PATTERN=${3:-"observer"}

        if [ -z "$DESCRIPTION_FILE" ] || [ ! -f "$DESCRIPTION_FILE" ]; then
            echo "‚ùå –§–∞–π–ª –æ–ø–∏—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $DESCRIPTION_FILE"
            show_help
            exit 1
        fi

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç) –∞–±–æ –ø–æ–≤–Ω–æ–≥–æ
        if [ -f "CLAUDE-CORE.md" ]; then
            CONTEXT_FILE="CLAUDE-CORE.md"
            echo "‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–æ–º–ø–∞–∫—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: CLAUDE-CORE.md"
        elif [ -f "CLAUDE.md" ]; then
            CONTEXT_FILE="CLAUDE.md"
            echo "‚ö†Ô∏è  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: CLAUDE.md (—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è CLAUDE-CORE.md)"
        else
            echo "‚ùå –§–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–µ–Ω CLAUDE-CORE.md –∞–±–æ CLAUDE.md"
            exit 1
        fi

        if [ ! -f "patterns/$PATTERN-pattern.md" ]; then
            echo "‚ùå patterns/$PATTERN-pattern.md –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
            echo "–î–æ—Å—Ç—É–ø–Ω—ñ patterns:"
            ls patterns/*.md 2>/dev/null | sed 's/patterns\///g' | sed 's/-pattern.md//g' || echo "  (–ø–∞–ø–∫–∞ patterns/ –ø–æ—Ä–æ–∂–Ω—è)"
            exit 1
        fi

        echo "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É —á–µ—Ä–µ–∑ Claude CLI..."
        echo "   –ö–æ–Ω—Ç–µ–∫—Å—Ç: $CONTEXT_FILE"
        echo "   Pattern: patterns/$PATTERN-pattern.md"
        claude --append-system-prompt "$(cat $CONTEXT_FILE)" \
               --append-system-prompt "$(cat patterns/$PATTERN-pattern.md)" \
               -p "$(cat $DESCRIPTION_FILE)"
        ;;

    "full-cycle")
        STEP_NAME=$2
        STEP_TYPE=$3
        PATTERN=$4
        DESCRIPTION=$5
        LANGUAGE=${6:-typescript}

        if [ -z "$STEP_NAME" ] || [ -z "$STEP_TYPE" ] || [ -z "$PATTERN" ] || [ -z "$DESCRIPTION" ]; then
            echo "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è full-cycle"
            show_help
            exit 1
        fi

        echo "üîÑ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—Ä–æ–∫—É..."
        echo "1Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Å—É..."
        ./create-step-description.sh "$STEP_NAME" "$STEP_TYPE" "$PATTERN" "$DESCRIPTION" "$LANGUAGE"

        echo "2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É..."
        ./motia-claude-workflow.sh generate "step-descriptions/${STEP_NAME}-description.md" "$PATTERN"
        ;;

    "aggregate-and-generate")
        STEP_FOLDER=$2
        PATTERN=${3:-"observer"}

        if [ -z "$STEP_FOLDER" ] || [ ! -d "$STEP_FOLDER" ]; then
            echo "‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞ –∫—Ä–æ–∫—É: $STEP_FOLDER"
            show_help
            exit 1
        fi

        STEP_NAME=$(basename "$STEP_FOLDER")
        OUTPUT_NAME="${STEP_NAME}-optimized"

        echo "üîÑ –ê–≥—Ä–µ–≥–∞—Ü—ñ—è + –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫—Ä–æ–∫—É..."
        echo "1Ô∏è‚É£ –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –ø–∞–ø–∫–∏..."
        ./aggregate-step-to-md.sh "$STEP_FOLDER" "$OUTPUT_NAME"

        echo "2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ–¥—É..."
        ./motia-claude-workflow.sh generate "step-descriptions/${OUTPUT_NAME}.md" "$PATTERN"
        ;;

    *)
        echo "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è: $ACTION"
        show_help
        exit 1
        ;;
esac
