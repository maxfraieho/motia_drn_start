#!/bin/bash

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–≤–Ω–∏—Ö –æ–ø–∏—Å—ñ–≤ Motia Steps –∑ –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º–∞–º–∏
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./create-step-description.sh <step-name> <step-type> <pattern> <description>

STEP_NAME=$1
STEP_TYPE=$2  # api, event, cron, stream
PATTERN=$3    # observer, command, strategy, chain, template, state, mediator, factory
DESCRIPTION=$4
LANGUAGE=${5:-typescript}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
if [ -z "$STEP_NAME" ] || [ -z "$STEP_TYPE" ] || [ -z "$PATTERN" ] || [ -z "$DESCRIPTION" ]; then
    echo "Usage: $0 <step-name> <step-type> <pattern> <description> [language]"
    echo ""
    echo "Arguments:"
    echo "  step-name     - –ù–∞–∑–≤–∞ –∫—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: user-processor)"
    echo "  step-type     - –¢–∏–ø –∫—Ä–æ–∫—É: api | event | cron | stream"
    echo "  pattern       - –ü–∞—Ç–µ—Ä–Ω: observer | command | strategy | chain | template | state | mediator | factory"
    echo "  description   - –û–ø–∏—Å —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∫—Ä–æ–∫—É"
    echo "  language      - –ú–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è: typescript | python | ruby (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: typescript)"
    echo ""
    echo "–ü—Ä–∏–∫–ª–∞–¥–∏:"
    echo "  $0 user-processor event observer '–û–±—Ä–æ–±–ª—è—î —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î welcome email'"
    echo "  $0 create-order api command 'API –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é' python"
    echo "  $0 notification-sender event strategy '–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Ä—ñ–∑–Ω—ñ –∫–∞–Ω–∞–ª–∏'"
    exit 1
fi

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–æ–∫
mkdir -p step-descriptions
mkdir -p generated-steps

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∫—Ä–æ–∫—É
case $STEP_TYPE in
    "api")
        HANDLER_TYPE="ApiRouteHandler"
        INPUT_PARAMS="req, ctx"
        CONFIG_EXTRA='"path": "/'"$STEP_NAME"'", "method": "POST",'
        ;;
    "event") 
        HANDLER_TYPE="EventHandler"
        INPUT_PARAMS="input, ctx"
        CONFIG_EXTRA='"subscribes": ["'"$STEP_NAME"'.trigger"],'
        ;;
    "cron")
        HANDLER_TYPE="CronHandler" 
        INPUT_PARAMS="ctx"
        CONFIG_EXTRA='"cron": "0 */6 * * *",'
        ;;
    "stream")
        HANDLER_TYPE="EventHandler"
        INPUT_PARAMS="input, ctx"
        CONFIG_EXTRA='"subscribes": ["stream.data"],'
        ;;
    *)
        echo "–ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –∫—Ä–æ–∫—É: $STEP_TYPE"
        exit 1
        ;;
esac

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è step-description.md —Ñ–∞–π–ª—É
cat > "step-descriptions/${STEP_NAME}-description.md" << EOF
# $STEP_NAME - –ü–æ–≤–Ω–∏–π –æ–ø–∏—Å –∫—Ä–æ–∫—É Motia

## üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—Ä–æ–∫—É
\`\`\`
$STEP_NAME/
‚îú‚îÄ‚îÄ handler.ts                   # –õ–æ–≥—ñ–∫–∞ –∫—Ä–æ–∫—É
‚îú‚îÄ‚îÄ config.json                  # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Motia
‚îú‚îÄ‚îÄ schema.json                  # –°—Ö–µ–º–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
‚îú‚îÄ‚îÄ README.md                    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
‚îú‚îÄ‚îÄ diagrams/                    # –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º–∏ –∫—Ä–æ–∫—É
‚îÇ   ‚îú‚îÄ‚îÄ logic-flow.drakon        # –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
‚îÇ   ‚îú‚îÄ‚îÄ error-handling.drakon    # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
‚îÇ   ‚îú‚îÄ‚îÄ data-processing.drakon   # –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö
‚îÇ   ‚îî‚îÄ‚îÄ state-transitions.drakon # –ü–µ—Ä–µ—Ö–æ–¥–∏ —Å—Ç–∞–Ω—ñ–≤
‚îú‚îÄ‚îÄ tests/                       # Unit —Ç–∞ integration —Ç–µ—Å—Ç–∏
‚îÇ   ‚îú‚îÄ‚îÄ unit/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ handler.test.ts
‚îÇ   ‚îî‚îÄ‚îÄ integration/
‚îÇ       ‚îî‚îÄ‚îÄ flow.test.ts
‚îî‚îÄ‚îÄ docs/                        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
    ‚îú‚îÄ‚îÄ api.md                   # API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
    ‚îú‚îÄ‚îÄ examples.md              # –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    ‚îî‚îÄ‚îÄ troubleshooting.md       # –†–æ–∑–≤'—è–∑–∞–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
\`\`\`

## üìã –°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫—Ä–æ–∫—É

### –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
- **–¢–∏–ø –∫—Ä–æ–∫—É**: $STEP_TYPE
- **–ü–∞—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è**: $PATTERN
- **–ú–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è**: $LANGUAGE
- **–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è**: $DESCRIPTION

### –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (config.json)
\`\`\`json
{
  "type": "$STEP_TYPE",
  "name": "$STEP_NAME",
  "description": "$DESCRIPTION",
  $CONFIG_EXTRA
  "emits": ["$STEP_NAME.completed"],
  "flows": ["$STEP_NAME-flow"],
  "compatibility_date": "2024-01-01"
}
\`\`\`

### –°—Ö–µ–º–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (schema.json)
\`\`\`json
{
  "\$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "data": {
      "type": "object",
      "description": "–í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∫—Ä–æ–∫—É"
    }
  },
  "required": ["data"]
}
\`\`\`

## üé® –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º–∏

### logic-flow.drakon - –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
\`\`\`
–ó–ê–ì–û–õ–û–í–û–ö: $STEP_NAME - –û—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫
‚îú‚îÄ –ü–û–ß–ê–¢–û–ö
‚îú‚îÄ –î–Ü–Ø: –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
‚îú‚îÄ –£–ú–û–í–ê: –î–∞–Ω—ñ –≤–∞–ª—ñ–¥–Ω—ñ?
‚îÇ  ‚îú‚îÄ –¢–ê–ö ‚Üí –î–Ü–Ø: –û–±—Ä–æ–±–∏—Ç–∏ –¥–∞–Ω—ñ
‚îÇ  ‚îî‚îÄ –ù–Ü ‚Üí –î–Ü–Ø: –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
‚îú‚îÄ –î–Ü–Ø: –í–∏–∫–æ–Ω–∞—Ç–∏ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫—É
‚îú‚îÄ –î–Ü–Ø: –ï–º—ñ—Ç—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—ó
‚îî‚îÄ –ö–Ü–ù–ï–¶–¨
\`\`\`

### error-handling.drakon - –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
\`\`\`
–ó–ê–ì–û–õ–û–í–û–ö: $STEP_NAME - –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
‚îú‚îÄ –ü–û–ß–ê–¢–û–ö
‚îú‚îÄ –£–ú–û–í–ê: –¢–∏–ø –ø–æ–º–∏–ª–∫–∏?
‚îÇ  ‚îú‚îÄ –í–∞–ª—ñ–¥–∞—Ü—ñ—è ‚Üí –î–Ü–Ø: –õ–æ–≥—É–≤–∞—Ç–∏ —è–∫ WARNING
‚îÇ  ‚îú‚îÄ –ë—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ ‚Üí –î–Ü–Ø: –õ–æ–≥—É–≤–∞—Ç–∏ —è–∫ ERROR
‚îÇ  ‚îî‚îÄ –°–∏—Å—Ç–µ–º–∞ ‚Üí –î–Ü–Ø: –õ–æ–≥—É–≤–∞—Ç–∏ —è–∫ CRITICAL
‚îú‚îÄ –î–Ü–Ø: –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ response
‚îî‚îÄ –ö–Ü–ù–ï–¶–¨
\`\`\`

### data-processing.drakon - –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö
\`\`\`
–ó–ê–ì–û–õ–û–í–û–ö: $STEP_NAME - –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö
‚îú‚îÄ –ü–û–ß–ê–¢–û–ö
‚îú‚îÄ –î–Ü–Ø: –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
‚îú‚îÄ –î–Ü–Ø: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
‚îú‚îÄ –£–ú–û–í–ê: –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω?
‚îÇ  ‚îú‚îÄ –¢–ê–ö ‚Üí –î–Ü–Ø: ctx.state.set()
‚îÇ  ‚îî‚îÄ –ù–Ü ‚Üí –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
‚îú‚îÄ –î–Ü–Ø: –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
‚îî‚îÄ –ö–Ü–ù–ï–¶–¨
\`\`\`

### state-transitions.drakon - –ü–µ—Ä–µ—Ö–æ–¥–∏ —Å—Ç–∞–Ω—ñ–≤
\`\`\`
–ó–ê–ì–û–õ–û–í–û–ö: $STEP_NAME - –°—Ç–∞–Ω–∏
‚îú‚îÄ –ü–û–ß–ê–¢–û–ö
‚îú‚îÄ –£–ú–û–í–ê: –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω?
‚îÇ  ‚îú‚îÄ INITIAL ‚Üí –î–Ü–Ø: –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ PROCESSING
‚îÇ  ‚îú‚îÄ PROCESSING ‚Üí –î–Ü–Ø: –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ COMPLETED/FAILED
‚îÇ  ‚îî‚îÄ COMPLETED ‚Üí –î–Ü–Ø: –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ARCHIVED
‚îî‚îÄ –ö–Ü–ù–ï–¶–¨
\`\`\`

## üîß –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è

### handler.ts
\`\`\`typescript
import { $HANDLER_TYPE, FlowContext } from "motia";

export const config = {
  type: "$STEP_TYPE",
  name: "$STEP_NAME",
  description: "$DESCRIPTION",
  $CONFIG_EXTRA
  emits: ["$STEP_NAME.completed"],
  compatibility_date: "2024-01-01"
};

export const handler: $HANDLER_TYPE = async (
  $INPUT_PARAMS
) => {
  // –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º

  // 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è (logic-flow.drakon)
  ctx.logger.info("Starting $STEP_NAME processing");

  // 2. –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö (data-processing.drakon)

  // 3. –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ (error-handling.drakon)

  // 4. –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º (state-transitions.drakon)

  // –ï–º—ñ—Ç—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π
  await ctx.emit({ 
    topic: "$STEP_NAME.completed", 
    data: { status: "success" } 
  });
};
\`\`\`

## üöÄ –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

### –ó–∞–ø—É—Å–∫ –∫—Ä–æ–∫—É
\`\`\`bash
EOF

# –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∫—Ä–æ–∫—É
case $STEP_TYPE in
    "api")
        echo "# API Step" >> "step-descriptions/${STEP_NAME}-description.md"
        echo "curl -X POST http://localhost:8080/$STEP_NAME -d '{"data": {}}'" >> "step-descriptions/${STEP_NAME}-description.md"
        ;;
    "event") 
        echo "# Event Step" >> "step-descriptions/${STEP_NAME}-description.md"
        echo "npx motia emit $STEP_NAME.trigger '{"data": {}}'" >> "step-descriptions/${STEP_NAME}-description.md"
        ;;
    "cron")
        echo "# Cron Step" >> "step-descriptions/${STEP_NAME}-description.md"
        echo "npx motia cron trigger $STEP_NAME" >> "step-descriptions/${STEP_NAME}-description.md"
        ;;
    "stream")
        echo "# Stream Step" >> "step-descriptions/${STEP_NAME}-description.md"
        echo "npx motia emit stream.data '{"data": {}}'" >> "step-descriptions/${STEP_NAME}-description.md"
        ;;
esac

cat >> "step-descriptions/${STEP_NAME}-description.md" << 'EOF'
```

### –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
```bash
# –ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤
npx motia logs {step-name}

# –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞–Ω—É
npx motia state get {group-id} {key}

# –¢—Ä–µ–π—Å–∏–Ω–≥
npx motia trace {trace-id}
```

## üéØ –í–∏–º–æ–≥–∏ –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó

1. **–í—Å—ñ —Ñ–∞–π–ª–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ** –∑–≥—ñ–¥–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
2. **–î–†–ê–ö–û–ù –¥—ñ–∞–≥—Ä–∞–º–∏ –º–∞—é—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏** –ª–æ–≥—ñ—Ü—ñ handler.ts
3. **–¢–µ—Å—Ç–∏ –º–∞—é—Ç—å –ø–æ–∫—Ä–∏–≤–∞—Ç–∏** –æ—Å–Ω–æ–≤–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó —Ç–∞ edge cases
4. **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –º–∞—î –±—É—Ç–∏ –ø–æ–≤–Ω–æ—é** –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏
5. **–°—Ö–µ–º–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –º–∞—é—Ç—å –±—É—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏** JSON Schema
6. **–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏** —Ç–∏–ø—É –∫—Ä–æ–∫—É —Ç–∞ –ø–∞—Ç–µ—Ä–Ω—É
EOF

echo "‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–ø–∏—Å –∫—Ä–æ–∫—É: step-descriptions/${STEP_NAME}-description.md"
echo ""
echo "üöÄ –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ:"
echo "claude --append-system-prompt "\$(cat CLAUDE.md)" --append-system-prompt "\$(cat patterns/${PATTERN}-pattern.md)" -p "\$(cat step-descriptions/${STEP_NAME}-description.md)""
